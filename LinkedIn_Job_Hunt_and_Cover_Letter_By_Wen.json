{
  "name": "LinkedIn_Job_Hunt_and_Cover_Letter",
  "nodes": [
    {
      "parameters": {
        "content": "## 自动化求职助手（LinkedIn + Indeed）：通过邮件获取最佳职位匹配 + 生成求职信 + 保存到Notion\n\n**作者**: Wen\n**Email地址**: wenjiaqi8255@outlook.com\n\n**描述**: \n此n8n工作流程旨在自动化寻找和推送最佳职位推荐的过程。它会获取您的简历，从LinkedIn和Indeed抓取职位列表，使用AI（Google Gemini）将职位与您的简历进行匹配，然后通过电子邮件发送最佳职位推荐给您。该工作流程按计划自动运行。\n\n**核心功能**:\n- 简历与职位自动匹配\n- 个性化求职信生成\n- 定时邮件推送高匹配度职位\n- Notion一体化职位管理\n- 多平台职位数据汇总（LinkedIn, Indeed）\n\n**Credit**: Tianyi tianyi.datascience@gmail.com",
        "height": 820,
        "width": 640,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2460,
        -600
      ],
      "id": "bcd6de88-108f-4743-875d-af3fd117ca4e",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2380,
        580
      ],
      "id": "1eba2d78-167b-43d8-9260-5ebe1fa59016",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a08ebfd2-be88-4870-9f83-9430eda33d56",
              "name": "Resume",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1040,
        580
      ],
      "id": "5dbb0ffa-7d5c-49ef-843e-32626bbd5f86",
      "name": "SetResumeField"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"database_id\": 1,\n    \"Company Name\": \"Innovatech Solutions\",\n    \"Job Title\": \"Senior Software Engineer\",\n    \"Industry\": \"Technology / SaaS\",\n    \"Reason for Match\": \"Strong alignment with your 7 years of backend development experience (Java/Spring) listed in CV and your preference for mid-sized tech companies.\",\n    \"Application URL\": \"https://linkedin.com/jobs/view/1234567890\",\n    \"Location\": \"San Francisco, CA\",\n    \"Flexibility\": \"Hybrid\",\n    \"Salary Range\": \"$120,000 - $150,000\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        2960,
        680
      ],
      "id": "d2f5bddf-9623-44b1-85d3-9873935b3768",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        2740,
        460
      ],
      "id": "d5aefbc3-cbc1-4e80-b1e7-2adaa2b51c17",
      "name": "Auto-fixing Output Parser"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "1Sk87acRe343xHRCzjffoLmuq1oAaI1Zt",
          "mode": "list",
          "cachedResultName": "your_cv.pdf",
          "cachedResultUrl": "https://drive.google.com/file/d/your_cv.pdf/view?usp=sharing"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1500,
        580
      ],
      "id": "0b7b87e5-101d-472f-a709-19e3a33d43db",
      "name": "DownloadResume",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "0rQ6Zntz0IpKOTBM",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1280,
        580
      ],
      "id": "09873953-c590-48c9-8604-da1ab5736ae4",
      "name": "Extract Information from Resume PDF"
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=You are an expert AI assistant specializing in career matching and job recommendation.\n\nYour Goal:\nYour primary task is to analyze a provided dataset of 100 LinkedIn job descriptions , a user's Curriculum Vitae (CV) provided as a string, and the user's job preferences is also provided as a string. Based on this analysis, you must identify and select the top 5 most suitable job opportunities for the user from the provided list.\n\nInputs You Will Receive:\n\njob_descriptions {{ $('stringify_json').item.json.stringified }}: A collection containing 100 job descriptions scraped from LinkedIn. Each job has the following structure:\n{\n  \"id\": [database ID],\n  \"company_name\": [company name],\n  \"job_title\": [job title],\n  \"industry\": [industry],\n  \"application_url\": [URL],\n  \"location\": [job location],\n  \"flexibility\": [work arrangement],\n  \"salary_range\": [salary if available],\n  \"created_at\": [timestamp]\n}\nuser_cv {{ $('SetResumeField').first().json.Resume }}: A single string containing the user's full CV text.\nuser_preferences {{ $('Input').first().json.Preference }}: A single string outlining the user's job preferences (e.g., desired roles, industries, company size, location constraints, salary expectations, work culture).\n\nYour Task Breakdown:\n\nAnalyze: Meticulously parse and understand the content of the user_cv and user_preferences.\nEvaluate: For each of the 100 job_descriptions:\nExtract key information: Company Name, Job Title, Industry (if explicitly mentioned or inferable), and Application URL.\nCompare the job's requirements, responsibilities, and company details against the user's skills, experience (from user_cv), and stated desires (from user_preferences).\nRank: Assess the suitability of each job for the user based on the comparison. Create a ranked list of all 100 jobs from most to least suitable.\nSelect: Choose the top {{ $('Input').first().json.RecommendedJobCount || 8 }} from your ranked list.\nFormat Output: Prepare the final output containing detailed information for only these 8 selected jobs.\n\nOutput Requirements:\n\nYou must return a structured list containing exactly 8 job recommendations. For each of the 8 jobs, provide the following specific details:\n\ndatabase_id: The \"id\" field from the job record.\nCompany Name: The name of the hiring company from \"company_name\".\nJob Title: The official title of the position from \"job_title\".\nIndustry: The industry sector from \"industry\" (if available).\nReason for Match: A brief (1-2 sentences) explanation justifying why this specific job is a strong match for the user. This explanation should explicitly reference alignment between the user's CV/preferences and the job description.\nApplication URL: The direct URL to apply from \"application_url\". If the apply URL is not found or empty, return the linkedin link for this job.\nLocation: The job location from \"location\".\nFlexibility: Work arrangement type from \"flexibility\".\nSalary Range: Salary information from \"salary_range\" if available, otherwise \"Not specified\".\n\nOutput format Example:\n[\n  {\n    \"database_id\": 1,\n    \"Company Name\": \"Innovatech Solutions\",\n    \"Job Title\": \"Senior Software Engineer\",\n    \"Industry\": \"Technology / SaaS\",\n    \"Reason for Match\": \"Strong alignment with your 7 years of backend development experience (Java/Spring) listed in CV and your preference for mid-sized tech companies.\",\n    \"Application URL\": \"https://linkedin.com/jobs/view/1234567890\",\n    \"Location\": \"San Francisco, CA\",\n    \"Flexibility\": \"Hybrid\",\n    \"Salary Range\": \"$120,000 - $150,000\"\n  },\n  {\n    \"database_id\": 2,\n    \"Company Name\": \"FinSecure Corp\",\n    \"Job Title\": \"Data Scientist\",\n    \"Industry\": \"Financial Services\",\n    \"Reason for Match\": \"Matches your PhD in Statistics, experience with machine learning models detailed in your CV, and stated interest in the Fintech sector.\",\n    \"Application URL\": \"https://linkedin.com/jobs/view/0987654321\",\n    \"Location\": \"New York, NY\",\n    \"Flexibility\": \"On-site\",\n    \"Salary Range\": \"$110,000 - $130,000\"\n  },\n  {\n    \"database_id\": 3,\n    \"Company Name\": \"Global Health Initiative\",\n    \"Job Title\": \"Biostatistician\",\n    \"Industry\": \"Healthcare / Research\",\n    \"Reason for Match\": \"Aligns with your strong statistical background and published research in healthcare outcomes mentioned in your CV.\",\n    \"Application URL\": \"https://linkedin.com/jobs/view/5678901234\",\n    \"Location\": \"Boston, MA\",\n    \"Flexibility\": \"Hybrid\",\n    \"Salary Range\": \"Not specified\"\n  },\n  {\n    \"database_id\": 4,\n    \"Company Name\": \"EcoSolutions\",\n    \"Job Title\": \"Sustainability Analyst\",\n    \"Industry\": \"Environmental Services\",\n    \"Reason for Match\": \"Matches your environmental science background and stated preference for working in sustainability-focused organizations.\",\n    \"Application URL\": \"https://linkedin.com/jobs/view/2345678901\",\n    \"Location\": \"Portland, OR\",\n    \"Flexibility\": \"Remote\",\n    \"Salary Range\": \"$85,000 - $95,000\"\n  },\n  {\n    \"database_id\": 5,\n    \"Company Name\": \"TechStart Accelerator\",\n    \"Job Title\": \"Technology Consultant\",\n    \"Industry\": \"Consulting\",\n    \"Reason for Match\": \"Aligns with your technical advisory experience and preference for varied project work mentioned in your preferences.\",\n    \"Application URL\": \"https://linkedin.com/jobs/view/3456789012\",\n    \"Location\": \"Austin, TX\",\n    \"Flexibility\": \"Hybrid\",\n    \"Salary Range\": \"$100,000 - $120,000\"\n  },\n  {\n    \"database_id\": 6,\n    \"Company Name\": \"TechStart Accelerator\",\n    \"Job Title\": \"Technology Consultant\",\n    \"Industry\": \"Consulting\",\n    \"Reason for Match\": \"Aligns with your technical advisory experience and preference for varied project work mentioned in your preferences.\",\n    \"Application URL\": \"https://linkedin.com/jobs/view/3456789012\",\n    \"Location\": \"Austin, TX\",\n    \"Flexibility\": \"Hybrid\",\n    \"Salary Range\": \"$100,000 - $120,000\"\n  },\n  {\n    \"database_id\": 7,\n    \"Company Name\": \"TechStart Accelerator\",\n    \"Job Title\": \"Technology Consultant\",\n    \"Industry\": \"Consulting\",\n    \"Reason for Match\": \"Aligns with your technical advisory experience and preference for varied project work mentioned in your preferences.\",\n    \"Application URL\": \"https://linkedin.com/jobs/view/3456789012\",\n    \"Location\": \"Austin, TX\",\n    \"Flexibility\": \"Hybrid\",\n    \"Salary Range\": \"$100,000 - $120,000\"\n  },\n  {\n    \"database_id\": 8,\n    \"Company Name\": \"TechStart Accelerator\",\n    \"Job Title\": \"Technology Consultant\",\n    \"Industry\": \"Consulting\",\n    \"Reason for Match\": \"Aligns with your technical advisory experience and preference for varied project work mentioned in your preferences.\",\n    \"Application URL\": \"https://linkedin.com/jobs/view/3456789012\",\n    \"Location\": \"Austin, TX\",\n    \"Flexibility\": \"Hybrid\",\n    \"Salary Range\": \"$100,000 - $120,000\"\n  }\n]",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        2620,
        220
      ],
      "id": "c76cea73-18b0-42fa-a3ab-550a4e2bfc5d",
      "name": "AI Agent: Find Best-matched jobs",
      "retryOnFail": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "sendTo": "={{ $('Input').first().json.EmailAddressToReceiveJobRecommendations}}",
        "subject": "=Best-Matched Jobs - {{ $now.format('yyyy-MM-dd') }} ",
        "message": "={{$input.item.json.html}}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        4040,
        560
      ],
      "id": "040a2699-d850-4238-8b3b-00a7f2e5ce75",
      "name": "Email the top job recommendations",
      "webhookId": "03a0f1de-696a-4a97-b58a-1b2b8376af1b",
      "credentials": {
        "gmailOAuth2": {
          "id": "zDz3z8L1LKqvsKLS",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "content": "### Schedule Trigger\n此节点触发工作流程按指定时间自动运行。默认设置为每天早上8:00触发，您可以根据需求调整时间频率。\n注：在n8n Settings里可设置时区",
        "height": 640,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2460,
        280
      ],
      "id": "4258d07a-938b-4a6b-ac7f-2bbc0d070d6c",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "### Input\n**关键配置节点**\n这里设置了整个工作流程中使用的重要变量：\n- **ApifyAPIKey**: 用于访问Apify服务的API密钥\n- **Preference**: 您的求职偏好，影响AI匹配结果\n- **EmailAddressToReceiveJobRecommendations**: 接收职位推荐的邮箱\n- **recommendedJobCount**: 每次推荐的职位数量\n- **first_timeout**: 首次API请求超时时间（秒）\n- **request_interval**: 重试请求间隔时间（秒）",
        "height": 640,
        "width": 500,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2160,
        280
      ],
      "id": "b1622b06-9a1b-4e68-8947-4df119793d9b",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "### DownloadResume\n从Google Drive下载您的简历PDF文件。请确保上传您的简历到Google Drive并获取文件ID。\n\n### Extract Information from Resume PDF\n提取简历PDF中的文本内容，为后续AI匹配做准备。\n\n### SetResumeField\n将提取的简历文本设置为变量，以便在工作流程的后续步骤中使用。",
        "height": 640,
        "width": 740
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1600,
        280
      ],
      "id": "08001c75-b495-4ad1-bc8b-f8cd8875dbf1",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "### start_apify_run_linkedin\n启动Apify爬虫，抓取LinkedIn上的职位信息。\n确保在jsonBody中设置正确的搜索URL和参数。\n\n### Check Run Status / Get Dataset Items\n这些节点检查爬虫运行状态并获取结果数据。\n包含错误处理和重试机制，确保可靠获取职位信息。\n",
        "height": 640,
        "width": 1280,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -800,
        280
      ],
      "id": "27bf44a1-cbb7-4c10-b991-ca1b67582d25",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "\n### Merge\n合并来自LinkedIn和Indeed的职位数据，创建统一的职位列表。",
        "height": 640,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        840,
        280
      ],
      "id": "5c9525bd-3d5c-422e-b432-df6a5365f24b",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "### AI Agent: Find Best-matched jobs\n**核心匹配节点**\n\n**输入**:\n- **scraped_job_data**: 从LinkedIn和Indeed抓取的所有职位信息\n- **user_cv**: 用户简历文本（从PDF提取）\n- **user_preferences**: 用户的求职偏好设置（如地点、行业、薪资期望等）\n- **recommendedJobCount**: 需要匹配的职位数量\n\n**输出**:\n结构化列表，包含推荐职位的详细信息：\n- **database_id**: 职位记录ID\n- **Company Name**: 招聘公司名称\n- **Job Title**: 职位名称\n- **Industry**: 行业领域\n- **Reason for Match**: 匹配原因说明（1-2句话说明为何此职位与用户匹配）\n- **Application URL**: 申请链接\n- **Location**: 工作地点\n- **Flexibility**: 工作安排方式（远程、混合、现场等）\n- **Salary Range**: 薪资范围（如有）",
        "height": 1200,
        "width": 580,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2500,
        -280
      ],
      "id": "8a4d335c-a196-4333-8fa9-9e8281f77a8a",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "### Email the top job recommendations\n将最佳匹配的职位通过电子邮件发送给您，邮件包含职位标题、公司、地点、薪资和申请链接等信息。",
        "height": 620,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3980,
        300
      ],
      "id": "04c1ad11-ce69-4cbc-b8dc-facda79487e2",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "content": "## 工作流程设置指南\n### 请按照以下步骤设置工作流程：\n\n### 1. 配置输入节点：\n打开工作流中的\"Input\"节点。\n填写必填字段：\n- **ApifyAPIKey**: 输入您的Apify API密钥（登录Apify: https://www.apify.com?fpr=oljm1 -> 设置 -> API & Integration）\n- **Preference**: 指定您的求职偏好（如\"无德语要求，高薪\"）\n- **EmailAddressToReceiveJobRecommendations**: 提供您希望接收职位推荐的电子邮件地址\n- **recommendedJobCount**: 设置每次推荐的职位数量（默认为10）\n\n### 2. 配置LinkedIn职位搜索URL：\n\n- 在浏览器的隐私/无痕窗口中打开LinkedIn Jobs搜索页面：https://www.linkedin.com/jobs/search/\n- 使用LinkedIn搜索界面设置您需要的筛选条件（关键词、地点、经验水平等）。**务必添加\"过去24小时\"筛选条件**\n- 复制浏览器地址栏中的完整URL\n- 打开工作流中的\"start_apify_run_linkedin\"节点\n- 在\"jsonBody\"参数中找到\"urls\"数组：\n  ```json\n  \"urls\": [\n      \"https://www.linkedin.com/jobs/search/...\"\n  ]\n\n将现有URL（\"https://www.linkedin.com/jobs/search/...\"）替换为您从隐私窗口复制的完整URL。确保URL用双引号括起来\n\n3. 配置Indeed职位搜索（可选）：\n\n类似地，可以在\"start_apify_run_indeed\"节点中配置Indeed搜索参数\n自定义搜索关键词、地点和其他参数以符合您的求职需求\n\n4. 上传您的简历：\n\n将您的简历（PDF格式）上传到Google Drive\n在\"DownloadResume\"节点中更新文件ID以指向您的简历\n\n",
        "height": 820,
        "width": 900,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1760,
        -600
      ],
      "id": "831b9298-2b78-49db-83a0-4eaf7dcee63d",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2600,
        420
      ],
      "id": "d83824f0-9c3d-4bd6-a448-eb8fa552b074",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "j6n2I3Ndveepr8Tk",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2700,
        660
      ],
      "id": "e6a594bb-5cb2-497c-a799-b37ac8c9a243",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "j6n2I3Ndveepr8Tk",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "job_listings",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "company_name",
              "fieldValue": "={{ $json.company_name }}"
            },
            {
              "fieldId": "job_title",
              "fieldValue": "={{ $json.job_title }}"
            },
            {
              "fieldId": "industry",
              "fieldValue": "={{ $json.industry }}"
            },
            {
              "fieldId": "application_url",
              "fieldValue": "={{ $json.application_url }}"
            },
            {
              "fieldId": "location",
              "fieldValue": "={{ $json.location }}"
            },
            {
              "fieldId": "flexibility",
              "fieldValue": "={{ $json.flexibility }}"
            },
            {
              "fieldId": "salary_range",
              "fieldValue": "={{ $json.salary_range }}"
            },
            {
              "fieldId": "id",
              "fieldValue": "={{ $json.id }}"
            },
            {
              "fieldId": "description",
              "fieldValue": "={{ $json.description.substring(0,4000) }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1860,
        440
      ],
      "id": "698fcc9b-0a64-4f8c-b0f4-9f2c2b0f48f3",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "sNAXrHqOFX7RwECT",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "path": "2f32a889-c6d8-4dda-a550-71d963063aa7",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2900,
        2220
      ],
      "id": "d9951f93-3343-4622-be8f-27aa22489dd7",
      "name": "Webhook",
      "webhookId": "2f32a889-c6d8-4dda-a550-71d963063aa7"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "1BFLqG74itZyelxhdJrAjgHTGAJNiECeR",
          "mode": "list",
          "cachedResultName": "your_cv.pdf",
          "cachedResultUrl": "https://drive.google.com/file/d/your_cv.pdf/view?usp=sharing"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1500,
        2220
      ],
      "id": "288968e3-8d8f-49ba-95d1-c8ced682d0b5",
      "name": "DownloadResume1",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "0rQ6Zntz0IpKOTBM",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "job_listings",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $('get_job_id').item.json.jobId }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2160,
        2220
      ],
      "id": "09770e2e-d7d5-4556-91f9-0eeb5d52e7d1",
      "name": "Supabase_get",
      "credentials": {
        "supabaseApi": {
          "id": "sNAXrHqOFX7RwECT",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 从Webhook调用中提取jobId参数\nconst jobId = $('Webhook').first().json?.query?.jobId;\n\nif (!jobId) {\n  return {\n    json: {\n      success: false,\n      message: \"Missing job ID parameter. Please provide a jobId query parameter.\"\n    }\n  };\n}\n\nreturn {\n  json: {\n    success: true,\n    jobId: jobId\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2320,
        2220
      ],
      "id": "7a0b34f3-df6b-4dd9-a13a-810171ef9536",
      "name": "get_job_id"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Cover Letter Assistant\n\nYou are a professional cover letter consultant who creates authentic, targeted, and personalized cover letters. Your task is to create an effective cover letter based on a job description and resume.\n\n## Basic Information\n\nPosition: {{ $('Supabase_get').item.json.job_title }}\nCompany: {{ $('Supabase_get').item.json.company_name }}\nIndustry: {{ $('Supabase_get').item.json.industry }}\nLocation: {{ $('Supabase_get').item.json.location }}\n\nJob Description: {{ $('Supabase_get').item.json.description }}\nResume Content: {{ $json.text }}\n\n## Cover Letter Guidelines\n\n### Core Principles\n\n1. **Company-needs focused**: Start with \"how my skills solve this company's specific problems\" rather than simply listing personal achievements\n2. **Concise and direct**: Use clear, short sentences; avoid complex structures and decorative vocabulary\n3. **Authentic personality**: Show the applicant's genuine work style and personality, avoid clichés\n4. **Targeted approach**: Address key requirements from the job description directly, not vaguely\n5. **Quality over quantity**: Prefer a few powerful examples rather than many vague accomplishments\n\n### Structure Suggestions\n\n**Opening paragraph**:\n- Briefly express why you're interested in this position\n- Mention a specific company project, value, or challenge, showing your research\n- Keep within 2-3 short sentences\n\n**Skills matching paragraphs**:\n- Focus each paragraph on one core skill or company need\n- State the company's need first, then introduce your relevant experience\n- Provide 1-2 specific examples, using data only when actually supported\n- Keep each paragraph to 3-4 short sentences\n\n**Unique value paragraph**:\n- Include a paragraph showcasing your unique advantage\n- This could be a relevant side project, special skill, or personal work approach\n- Show how this unique value benefits the company\n\n**Closing paragraph**:\n- Simply express your interest in further discussion\n- Consider mentioning your personal website or portfolio\n- Keep it brief, 2-3 sentences is enough\n\n### Language Style Guide\n\n- Use active language, avoid passive voice\n- Avoid clichés like \"I am excited to apply...\" or \"I believe I am the best candidate...\"\n- Adjust tone for company culture: technical companies use precise terminology, creative companies emphasize innovative thinking, etc.\n- Use natural, conversational language, as if talking with the hiring manager\n\n### Common Mistakes to Avoid\n\n- Overusing industry jargon and abbreviations\n- Long paragraphs and complex sentences\n- Data claims without supporting context\n- Vague achievement descriptions\n- Too much focus on \"what I did\" rather than \"what I can do for you\"\n\n## Final Check\n\nBefore finalizing, ensure the cover letter:\n- Totals 300-400 words (not exceeding one page)\n- Uses no templated expressions or business clichés\n- Addresses all key requirements from the job description\n- Has a clear focus and natural transitions in each paragraph\n- Shows the applicant's personality and work style\n- Is oriented toward solving company problems\n\nPlease create a cover letter following these guidelines, keeping it authentic, concise, and targeted.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -1040,
        2220
      ],
      "id": "ff220f55-7235-4360-b23b-aaf6b766a433",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9ba8a38a-17fc-4b4a-8a4e-6981b92cbee4",
              "name": "ApifyAPIKey",
              "value": "apify_api_your_api_key",
              "type": "string"
            },
            {
              "id": "a08ebfd2-be88-4870-9f83-9430eda33d56",
              "name": "Preference",
              "value": "=no German proficiency requirement, high pay",
              "type": "string"
            },
            {
              "id": "82b79f4d-43b9-4a36-80df-0d4ca51ab5e5",
              "name": "EmailAddressToReceiveJobRecommendations",
              "value": "your@email.com",
              "type": "string"
            },
            {
              "id": "3ee98ee6-7c9f-4f2c-afe7-12bb4d53c7c2",
              "name": "recommendedJobCount",
              "value": 10,
              "type": "number"
            },
            {
              "id": "b4c797c5-da56-47e1-84c1-ce64ea9b508e",
              "name": "first_timeout",
              "value": 60,
              "type": "number"
            },
            {
              "id": "8e16b176-2cd3-448a-a859-6570cacda1f0",
              "name": "request_interval",
              "value": 30,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1980,
        580
      ],
      "id": "f9734f5e-1ea9-4407-84b4-3ab299e87b3a",
      "name": "Input"
    },
    {
      "parameters": {
        "sendTo": "={{ $('Input1').first().json.EmailAddressToReceiveCoverLetter}}",
        "subject": "Cover Letter",
        "message": "={{ $json.data }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -60,
        2220
      ],
      "id": "ad6411f2-2608-4f7f-9efe-3b6656710d0d",
      "name": "Gmail",
      "webhookId": "bd315610-e0aa-4f3c-87f7-a29928bb5f0f",
      "credentials": {
        "gmailOAuth2": {
          "id": "zDz3z8L1LKqvsKLS",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "mode": "markdownToHtml",
        "markdown": "={{ $('AI Agent').item.json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        -260,
        2220
      ],
      "id": "30683ac7-89bd-4df4-9071-593ee43d4e1f",
      "name": "Markdown"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "97e6b24a-a185-4e8e-9767-b0fe88264885",
              "name": "stringified",
              "value": "={{ JSON.stringify($json) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2320,
        580
      ],
      "id": "a3930751-dacb-4c9d-89be-b2fc42590513",
      "name": "stringify_json"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1320,
        2220
      ],
      "id": "899a0ede-0749-4e88-9539-8fb4d9a5fa95",
      "name": "Extract Information from Resume PDF1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "job_listings",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1220,
        580
      ],
      "id": "0b09f2ef-e1f2-4535-9e35-be43e37651e2",
      "name": "Supabase1",
      "executeOnce": true,
      "credentials": {
        "supabaseApi": {
          "id": "sNAXrHqOFX7RwECT",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 获取AI Agent的输出文本\nconst fullText = $('set_cover_letter').first().json.output;\n\n// 按自然段落分割文本\nconst paragraphs = fullText.split(\"\\n\\n\");\n\n// 提取第一段作为标题（可选）\nconst title = paragraphs[0].trim();\n\n// 创建块内容\nconst blocks = [];\n\nparagraphs.forEach((paragraph, index) => {\n  if (paragraph.trim().length > 0) {\n    // 确保段落不超过2000字符\n    if (paragraph.length > 2000) {\n      // 如果超过，进一步分割\n      let startIdx = 0;\n      while (startIdx < paragraph.length) {\n        const chunk = paragraph.substring(startIdx, Math.min(startIdx + 1900, paragraph.length));\n        blocks.push({\n          \"type\": \"paragraph\",\n          \"paragraph\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": chunk\n              }\n            }]\n          }\n        });\n        startIdx += 1900;\n      }\n    } else {\n      // 如果段落长度合适，直接添加\n      blocks.push({\n        \"type\": \"paragraph\",\n        \"paragraph\": {\n          \"rich_text\": [{\n            \"type\": \"text\",\n            \"text\": {\n              \"content\": paragraph\n            }\n          }]\n        }\n      });\n    }\n  }\n});\n\n// 返回结果，包含标题和块\nreturn {\n  json: {\n    title: title,\n    blocks: blocks\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -440,
        2220
      ],
      "id": "0d98d61f-bd18-4022-beba-49d7e4b9ebd3",
      "name": "parse_to_markdown"
    },
    {
      "parameters": {
        "jsCode": "// 获取AI Agent的输出文本\nconst fullText = $('set_cover_letter').first().json.output;\n\n// 按自然段落分割文本\nconst paragraphs = fullText.split(\"\\n\\n\");\n\n// 创建多个输出项，每项对应一个Notion段落\nconst returnItems = [];\n\nparagraphs.forEach((paragraph, index) => {\n  if (paragraph.trim().length > 0) {\n    // 确保段落不超过2000字符\n    if (paragraph.length > 2000) {\n      // 如果超过，进一步分割\n      let startIdx = 0;\n      while (startIdx < paragraph.length) {\n        const chunk = paragraph.substring(startIdx, Math.min(startIdx + 1900, paragraph.length));\n        returnItems.push({\n          json: {\n            index: returnItems.length,\n            content: chunk,\n            type: \"paragraph\"\n          }\n        });\n        startIdx += 1900;\n      }\n    } else {\n      // 如果段落长度合适，直接添加\n      returnItems.push({\n        json: {\n          index: index,\n          content: paragraph,\n          type: \"paragraph\"\n        }\n      });\n    }\n  }\n});\n\nreturn returnItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        2220
      ],
      "id": "9506bc44-cd63-4036-9117-b90f3c0ae659",
      "name": "parse_to_paragraphs"
    },
    {
      "parameters": {
        "jsCode": "return $('parse_to_paragraphs').all().map(item => ({\n  json: {\n    content: item.json.content,\n    type: item.json.type,\n    index: item.json.index\n  }\n}))"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        580,
        2220
      ],
      "id": "9aa6a16e-eb1b-4f0c-80fa-4ddd2901e59e",
      "name": "return_all_items"
    },
    {
      "parameters": {
        "resource": "block",
        "blockId": {
          "__rl": true,
          "value": "={{ $('create_new_cover_letter').item.json.id }}",
          "mode": "id"
        },
        "blockUi": {
          "blockValues": [
            {
              "textContent": "={{ $json.content }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        760,
        2220
      ],
      "id": "2c177160-fb3d-461d-9692-f336edf9b504",
      "name": "append_blocks",
      "executeOnce": false,
      "credentials": {
        "notionApi": {
          "id": "czxJIwoCUXrGNtjv",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "1ed2e9a3-326a-8177-8956-c0b5c8378bd9",
          "mode": "list",
          "cachedResultName": "Job Tracker",
          "cachedResultUrl": "https://www.notion.so/1ed2e9a3326a81778956c0b5c8378bd9"
        },
        "title": "={{ $json.company_name }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Application URL|url",
              "urlValue": "={{ $json.application_url }}"
            },
            {
              "key": "Flexibility|multi_select",
              "multiSelectValue": "={{ $json.flexibility }}"
            },
            {
              "key": "Industry|rich_text",
              "textContent": "={{ $json.industry }}"
            },
            {
              "key": "Salary Range|rich_text",
              "textContent": "={{ $json.salary_range }}"
            },
            {
              "key": "Status|select",
              "selectValue": "Applied"
            },
            {
              "key": "Location|rich_text",
              "textContent": "={{ $json.location }}"
            },
            {
              "key": "Job Title|rich_text",
              "textContent": "={{ $json.job_title }}"
            }
          ]
        },
        "blockUi": {
          "blockValues": [
            {
              "textContent": "={{ $json.description.substring(0,1998) }}"
            },
            {
              "textContent": "=created at {{ $json.created_at }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        -1900,
        2220
      ],
      "id": "bb4a25b8-f2f5-477d-af13-2b56de8b04d6",
      "name": "create_new_job_listing",
      "executeOnce": true,
      "credentials": {
        "notionApi": {
          "id": "czxJIwoCUXrGNtjv",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "1ed2e9a3-326a-809c-8508-f4faad3a019c",
          "mode": "list",
          "cachedResultName": "Cover Letter",
          "cachedResultUrl": "https://www.notion.so/1ed2e9a3326a809c8508f4faad3a019c"
        },
        "title": "=Jiaqi_Wen_ {{ $now.format('yyyy-MM-dd HH:MM') }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Company Name|title",
              "title": "={{ $('create_new_job_listing').item.json.property_company_name }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        400,
        2220
      ],
      "id": "39db0f2b-6270-43a8-93d8-3dc582ff50cf",
      "name": "create_new_cover_letter",
      "executeOnce": true,
      "credentials": {
        "notionApi": {
          "id": "czxJIwoCUXrGNtjv",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7385ee1c-5a5e-4576-b311-c6fd3f678a8b",
              "name": "property_company_name",
              "value": "={{ $json.property_company_name }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1660,
        2220
      ],
      "id": "0cbfcbe5-8579-46be-b855-a5c60bed2636",
      "name": "set_company_name"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12c45e38-79d5-49d1-92ed-8e1aee3081b6",
              "name": "output",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -700,
        2220
      ],
      "id": "5a01466f-ad94-4471-9937-c18289e1b228",
      "name": "set_cover_letter"
    },
    {
      "parameters": {
        "jsCode": "// 从 Supabase 查询结果中提取已存在的职位 ID\n// 确保所有 ID 都转换为相同的类型（字符串）\nconst existingJobIds = $('Supabase1').all().map(item => String(item.json.id));\nconsole.log(`数据库中已有 ${existingJobIds.length} 个职位 ID`);\n// 获取新抓取的职位数据\nconst newJobs = $('Merge').all();\nconsole.log(`新抓取的职位数量: ${newJobs.length} 个`);\n// 过滤掉已存在的职位 - 同样确保 ID 转换为相同类型进行比较\nconst uniqueJobs = newJobs.filter(job => !existingJobIds.includes(String(job.json.id)));\nconsole.log(`过滤后的不重复职位数量: ${uniqueJobs.length} 个`);\n// 在 return 前再次过滤 uniqueJobs 数组中的重复值\nconst finalUniqueJobs = uniqueJobs.filter((job, index, self) => \n  index === self.findIndex(j => String(j.json.id) === String(job.json.id))\n);\nconsole.log(`最终去重后的职位数量: ${finalUniqueJobs.length} 个`);\n// 返回不重复的职位数据\nreturn finalUniqueJobs;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1640,
        580
      ],
      "id": "a1c6bea1-932d-4381-a8f8-7c3a0a0eadf7",
      "name": "get_unique_jobs"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-lite-001",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1020,
        2440
      ],
      "id": "07500052-1a4b-4d0f-b347-24aac8650882",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "j6n2I3Ndveepr8Tk",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6c37a80a-a136-4f79-b8c8-056cd044d5c0",
              "name": "runId",
              "value": "={{ $json.data.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -520,
        580
      ],
      "name": "Extract Run ID",
      "id": "e4024b46-2576-44b3-b4ec-a49d642a655a"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/actor-runs/{{ $('Extract Run ID').item.json.runId }}?token={{ $('Input').item.json.ApifyAPIKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -120,
        580
      ],
      "name": "Check Run Status",
      "id": "b020a447-3c83-4abe-9101-332a32f14446"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.data.status }}",
              "operation": "equal",
              "value2": "=SUCCEEDED"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        80,
        580
      ],
      "name": "Check if Succeeded",
      "id": "7dc13011-3cb0-4945-942b-2e3df15f9bc5"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/actor-runs/{{ $('Extract Run ID').item.json.runId }}/dataset/items?token={{ $('Input').item.json.ApifyAPIKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        280,
        480
      ],
      "name": "Get Dataset Items",
      "id": "08b46bef-3eff-402e-bc09-ad70e4d15cd0"
    },
    {
      "parameters": {
        "amount": "={{ $('Input').first().json.request_interval }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        280,
        680
      ],
      "name": "Wait and Retry",
      "id": "6b420dda-f126-4f32-a492-e71c0d8043bf",
      "webhookId": "48a6cc05-fc78-4467-a7ac-9e8606c26cdd"
    },
    {
      "parameters": {
        "amount": "={{ $('Input').first().json.first_timeout }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -320,
        580
      ],
      "name": "Wait 1 Minutes",
      "id": "980a6288-1a93-4a2d-88ce-8bf4fd064872",
      "webhookId": "c2bee0ca-58e3-4354-ab66-54fc1cc04862"
    },
    {
      "parameters": {
        "jsCode": "// 获取所有职位\nconst allJobs = $input.all();\nconsole.log(`总职位数: ${allJobs.length}`);\n\n// 过滤出新职位和未处理职位\nconst jobsForProcessing = allJobs.filter(item => {\n  const job = item.json;\n  // 选择'new'状态或无状态的职位\n  return job.status === 'new' || job.status === null || job.status === undefined;\n});\n\nconsole.log(`过滤后待处理职位数: ${jobsForProcessing.length}`);\n\n// 如果没有新职位，添加一个日志消息\nif (jobsForProcessing.length === 0) {\n  console.log('没有新职位需要处理');\n}\n\nreturn jobsForProcessing;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        580
      ],
      "id": "cb23b816-4d97-4a35-84e8-6cac1999f011",
      "name": "filter_by_status"
    },
    {
      "parameters": {
        "jsCode": "// 在n8n的Function节点中\nlet jobListingsHTML = '';\nlet jobs;\n\n// 尝试多种可能的数据结构\ntry {\n  if ($input.item && $input.item[0] && $input.item[0].json && $input.item[0].json.output) {\n    jobs = $input.item[0].json.output;\n  } else if ($input.all()[0].json.output) {\n    jobs = $input.all()[0].json.output;\n  } else if ($input.first().json[0] && $input.first().json[0].output) {\n    jobs = $input.first().json[0].output;\n  } else {\n    // 可能数据在更深的嵌套中\n    jobs = $input.first().json;\n    if (Array.isArray(jobs) && jobs[0] && jobs[0].output) {\n      jobs = jobs[0].output;\n    }\n  }\n} catch (error) {\n  // 数据结构问题时的备选方案\n  jobs = [];\n  console.log('Error accessing job data:', error.message);\n}\n\n// 如果jobs还不是数组，尝试最后的方法\nif (!Array.isArray(jobs)) {\n  console.log('Jobs is not an array, trying alternative method');\n  // 打印出实际数据结构以便调试\n  console.log('Actual data structure:', JSON.stringify($input.all()));\n  jobs = [];\n}\n\n// 生成HTML...\n// 为每个工作机会创建HTML\njobs.forEach(job => {\n  jobListingsHTML += `\n    <!-- Job for ${job['Company Name']} -->\n    <tr>\n        <td style=\"padding: 0 25px;\">\n            <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"border: 1px solid #dce3ea; border-radius: 10px; margin-bottom: 25px; overflow: hidden;\">\n                <tr>\n                    <td style=\"background-color: #4a6fa5; color: #ffffff; padding: 18px 20px;\">\n                        <strong style=\"font-size: 18px;\">${job['Company Name']}</strong><br>\n                        <span style=\"font-size: 14px; opacity: 0.9;\">${job['Job Title']}</span>\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"padding: 20px; background-color: #ffffff;\">\n                        <div style=\"display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 14px;\">\n                            <div style=\"background-color: #eef2f7; color: #4a6fa5; border-radius: 20px; padding: 8px 14px; font-size: 13px; display: inline-block;\">${job.Industry}</div>\n                            <div style=\"background-color: #f0f7f4; color: #00a06a; border-radius: 20px; padding: 8px 14px; font-size: 13px; display: inline-block;\">${job.Flexibility}</div>\n                            <div style=\"background-color: #f7f4f0; color: #a06a00; border-radius: 20px; padding: 8px 14px; font-size: 13px; display: inline-block;\">${job['Salary Range']}</div>\n                        </div>\n                        \n                        <div style=\"margin-bottom: 12px; background-color: #fafafa; padding: 12px; border-radius: 6px;\">\n                            <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n                                <tr>\n                                    <td style=\"padding-bottom: 8px;\">\n                                        <span style=\"font-size: 13px; color: #666666;\">📍 Location:</span>\n                                        <span style=\"font-size: 13px; color: #333333; font-weight: bold; margin-left: 4px;\">${job.Location}</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                        \n                        <div style=\"margin-bottom: 18px; border-left: 4px solid #4a6fa5; padding-left: 14px; background-color: #f9f9f9; padding-top: 10px; padding-bottom: 10px;\">\n                            <strong style=\"color: #2a5298; font-size: 15px;\">Why this matches your profile:</strong>\n                            <p style=\"font-size: 13px; color: #444444; margin: 10px 0 0;\">${job['Reason for Match']}</p>\n                        </div>\n\n                        <a href=\"${job['Application URL']}\" target=\"_blank\" style=\"display: inline-block; background-color: #00c07f; color: #ffffff; text-decoration: none; padding: 12px 24px; font-size: 14px; font-weight: bold; border-radius: 6px;\">Apply Now</a>\n                        <div style=\"display: flex; margin-top: 15px;\">\n                            <a href=\"http://localhost:5678/webhook/2f32a889-c6d8-4dda-a550-71d963063aa7?jobId=${job['database_id']}\" target=\"_blank\" style=\"display: inline-block; background-color: #4a6fa5; color: #ffffff; text-decoration: none; padding: 8px 16px; font-size: 12px; border-radius: 4px;\">Generate Cover Letter</a>\n                        </div>\n                    </td>\n                </tr>\n            </table>\n        </td>\n    </tr>\n  `;\n});\n\n// 在你原始的HTML模板中替换掉单个工作项的部分\nconst fullHTML = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Your Tailored Career Opportunities</title>\n</head>\n<body style=\"font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; line-height: 1.6; color: #333333; background-color: #f5f7fa; margin: 0; padding: 0;\">\n    <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n            <td align=\"center\" style=\"padding: 30px 15px;\">\n                <table width=\"600\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"background-color: #ffffff; border-collapse: collapse; box-shadow: 0 0 12px rgba(0,0,0,0.05); border-radius: 8px; overflow: hidden;\">\n                    <tr>\n                        <td style=\"background-color: #2a5298; color: #ffffff; padding: 40px 30px; text-align: center;\">\n                            <h1 style=\"margin: 0; font-size: 24px; font-weight: bold;\">Your Personalized Career Opportunities</h1>\n                            <p style=\"margin: 15px 0 0; font-size: 15px; opacity: 0.9;\">Handpicked opportunities aligned with your expertise and preferences</p>\n                        </td>\n                    </tr>\n\n                    <tr><td height=\"30\"></td></tr>\n\n                    ${jobListingsHTML}\n\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</html>`;\n\n// 返回正确格式\nreturn [{json: {html: fullHTML}}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3740,
        560
      ],
      "id": "ce73e0d7-28ec-4001-98ed-11a82f954279",
      "name": "generate_html_template"
    },
    {
      "parameters": {
        "jsCode": "// 获取AI匹配后的职位\nlet matchedJobs = [];\nconsole.log('t')\n\ntry {\n  // 尝试从不同可能的位置获取匹配的职位\n  if ($input.first().json.output && Array.isArray($input.first().json.output)) {\n    matchedJobs = $input.first().json.output;\n  } else if ($input.first().json && Array.isArray($input.first().json)) {\n    matchedJobs = $input.first().json;\n  } else {\n    console.log('无法找到匹配的职位数据，检查输入格式');\n    console.log('输入数据:', JSON.stringify($input.first().json));\n  }\n} catch (error) {\n  console.error('解析匹配职位时出错:', error.message);\n}\n\nconsole.log(`找到 ${matchedJobs.length} 个匹配的职位`);\n\n// 准备要更新的职位ID列表\nconst jobIdsToUpdate = matchedJobs.map(job => job.database_id || job.id);\nconsole.log('要更新的职位ID:', jobIdsToUpdate);\n\n// 准备要保存到Supabase的数据\nconst updateOperations = [];\nfor (const id of jobIdsToUpdate) {\n  if (id) {\n    updateOperations.push({\n      json: {\n        id: id,\n        status: 'processed',\n        processed_at: new Date().toISOString()\n      }\n    });\n  }\n}\n\n// 保存原始匹配结果，以便后续流程使用\nconst originalData = $input.first().json;\n\n// 返回包含原始数据和更新操作的复合对象\nreturn {\n  json: {\n    matchedJobs: originalData,\n    updateOperations: updateOperations\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3200,
        560
      ],
      "id": "15e09766-5173-4ae4-bdcb-307bb1eb8463",
      "name": "update_job_status"
    },
    {
      "parameters": {
        "content": "### Supabase / Supabase1\n将爬取的职位数据存储到Supabase数据库中，用于持久化存储和去重。\n确保不重复处理同一职位信息。\n\n### filter_by_status / get_unique_jobs\n过滤出新的、未处理过的职位信息，并确保职位ID的唯一性。",
        "height": 640,
        "width": 920,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1140,
        280
      ],
      "id": "49900548-3976-4a2c-bd9d-f4b4fc1fd335",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "content": "### start_apify_run_indeed\n启动Apify爬虫，抓取LinkedIn上的职位信息。\n确保在jsonBody中设置正确的搜索URL和参数。\n\n### Check Run Status / Get Dataset Items\n这些节点检查爬虫运行状态并获取结果数据。\n包含错误处理和重试机制，确保可靠获取职位信息。\n",
        "height": 660,
        "width": 1280,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -800,
        1020
      ],
      "id": "c3e70cdb-90ef-44bb-bc9e-90cb9d8ed2ba",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6c37a80a-a136-4f79-b8c8-056cd044d5c0",
              "name": "runId",
              "value": "={{ $json.data.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -520,
        1340
      ],
      "name": "Extract Run ID1",
      "id": "743c0c6a-08bd-4d82-b38c-ba4a01fc48bf"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/actor-runs/{{ $('Extract Run ID1').item.json.runId }}?token={{ $('Input').first().json.ApifyAPIKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -120,
        1340
      ],
      "name": "Check Run Status1",
      "id": "93631c3d-9415-43dd-904a-6b2752f7fb6d"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.data.status }}",
              "operation": "equal",
              "value2": "=SUCCEEDED"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        80,
        1340
      ],
      "name": "Check if Succeeded1",
      "id": "9ea1abca-2877-4b1d-bd57-fd6590a09886"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/actor-runs/{{ $('Extract Run ID1').item.json.runId }}/dataset/items?token={{ $('Input').first().json.ApifyAPIKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        280,
        1240
      ],
      "name": "Get Dataset Items1",
      "id": "b3402b6d-7c6c-4d48-ad1e-32fda20c3142"
    },
    {
      "parameters": {
        "amount": "={{ $('Input').first().json.request_interval }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        280,
        1440
      ],
      "name": "Wait and Retry1",
      "id": "8520cb71-5518-4044-ae51-1218287e4dca",
      "webhookId": "48a6cc05-fc78-4467-a7ac-9e8606c26cdd"
    },
    {
      "parameters": {
        "amount": "={{ $('Input').first().json.first_timeout }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -320,
        1340
      ],
      "name": "Wait 1 Minutes1",
      "id": "fc4a65d9-4795-4570-bdbc-a9dac5f91551",
      "webhookId": "c2bee0ca-58e3-4354-ab66-54fc1cc04862"
    },
    {
      "parameters": {
        "jsCode": "// 标准化职位数据的函数节点\nfunction normalizeJobData(inputData) {\n  // 创建含默认值的标准职位对象\n  const standardJob = {\n    id:'',\n    company_name: '',\n    job_title: '',\n    application_url: '',\n    location: '',\n    description: '',\n    industry: 'Not specified',\n    flexibility: 'Not specified',\n    salary_range: 'Not specified',\n    status: 'new',\n    source: 'external',\n    created_at: new Date().toISOString()\n  };\n  \n  // 尝试映射输入字段 - 使用多种可能的命名\n  // 公司名称\n  standardJob.id = inputData.id || inputData.ID || inputData.job_id\n  // 确保ID始终是字符串\n  if (inputData.id !== undefined && inputData.id !== null) {\n    standardJob.id = String(inputData.id); // 强制转换为字符串\n  } else if (inputData.database_id !== undefined && inputData.database_id !== null) {\n    standardJob.id = String(inputData.database_id);\n  }\n  \n  standardJob.company_name = inputData.company_name || inputData.company || \n                            inputData.companyName || inputData.employer || 'Unknown Company';\n  \n  // 职位名称\n  standardJob.job_title = inputData.job_title || inputData.title || \n                         inputData.position || inputData.role || inputData.positionName || inputData.position_name || 'Unknown Position';\n  \n  // 应用链接\n  standardJob.application_url = inputData.application_url || inputData.url || \n                               inputData.link || inputData.apply_url || inputData.applyUrl || '';\n  \n  // 地点\n  standardJob.location = inputData.location || inputData.place || \n                        inputData.job_location || inputData.city || '';\n  \n  // 描述\n  standardJob.description = inputData.description || inputData.job_description || \n                           inputData.desc || inputData.details || inputData.desription || inputData.descriptionText || '';\n  \n  // 行业\n  standardJob.industry = inputData.industry || inputData.sector || \n                        inputData.field || standardJob.industry;\n  \n  // 灵活性/工作安排\n  standardJob.flexibility = inputData.flexibility || inputData.work_type || inputData.jobType[1] ||\n                           inputData.arrangement || standardJob.flexibility;\n  \n  // 薪资范围\n  standardJob.salary_range = inputData.salary_range || inputData.salary || \n                            inputData.compensation || standardJob.salary_range;\n  \n  // 来源可以被覆盖\n  if (inputData.source) {\n    standardJob.source = inputData.source;\n  }\n  \n  // 日志记录，帮助调试\n  console.log('原始数据:', JSON.stringify(inputData));\n  console.log('标准化后:', JSON.stringify(standardJob));\n  \n  return standardJob;\n}\n\n// 获取所有输入项\nconst inputItems = $input.all();\nconsole.log(`处理 ${inputItems.length} 个职位项`);\n\n// 使用map处理每个项目\nconst normalizedJobs = inputItems.map(item => {\n  const inputData = item.json || {};\n  return { json: normalizeJobData(inputData) };\n});\n\n// 记录处理结果\nconsole.log(`标准化后得到 ${normalizedJobs.length} 个职位`);\n\n// 返回标准化的职位数据数组\nreturn normalizedJobs;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        600,
        1240
      ],
      "id": "e2c6f06c-d197-4f99-be0d-2e5f3cf2c4bc",
      "name": "normalize_job_data"
    },
    {
      "parameters": {
        "jsCode": "// 标准化职位数据的函数节点\nfunction normalizeJobData(inputData) {\n  // 创建含默认值的标准职位对象\n  const standardJob = {\n    id:'',\n    company_name: '',\n    job_title: '',\n    application_url: '',\n    location: '',\n    description: '',\n    industry: 'Not specified',\n    flexibility: 'Not specified',\n    salary_range: 'Not specified',\n    status: 'new',\n    source: 'external',\n    created_at: new Date().toISOString()\n  };\n  \n  // 尝试映射输入字段 - 使用多种可能的命名\n  // 公司名称\n  standardJob.id = inputData.id || inputData.ID || inputData.job_id\n  // 确保ID始终是字符串\n  if (inputData.id !== undefined && inputData.id !== null) {\n    standardJob.id = String(inputData.id); // 强制转换为字符串\n  } else if (inputData.database_id !== undefined && inputData.database_id !== null) {\n    standardJob.id = String(inputData.database_id);\n  }\n  \n  standardJob.company_name = inputData.company_name || inputData.company || \n                            inputData.companyName || inputData.employer || 'Unknown Company';\n  \n  // 职位名称\n  standardJob.job_title = inputData.job_title || inputData.title || \n                         inputData.position || inputData.role || inputData.positionName || inputData.position_name || 'Unknown Position';\n  \n  // 应用链接\n  standardJob.application_url = inputData.application_url || inputData.url || \n                               inputData.link || inputData.apply_url || inputData.applyUrl || '';\n  \n  // 地点\n  standardJob.location = inputData.location || inputData.place || \n                        inputData.job_location || inputData.city || '';\n  \n  // 描述\n  standardJob.description = inputData.description || inputData.job_description || \n                           inputData.desc || inputData.details || inputData.desription || inputData.descriptionText || '';\n  \n  // 行业\n  standardJob.industry = inputData.industry || inputData.sector || \n                        inputData.field || standardJob.industry;\n  \n  // 灵活性/工作安排\n  standardJob.flexibility = inputData.flexibility || inputData.work_type || inputData.jobType[1] ||\n                           inputData.arrangement || standardJob.flexibility;\n  \n  // 薪资范围\n  standardJob.salary_range = inputData.salary_range || inputData.salary || \n                            inputData.compensation || standardJob.salary_range;\n  \n  // 来源可以被覆盖\n  if (inputData.source) {\n    standardJob.source = inputData.source;\n  }\n  \n  // 日志记录，帮助调试\n  console.log('原始数据:', JSON.stringify(inputData));\n  console.log('标准化后:', JSON.stringify(standardJob));\n  \n  return standardJob;\n}\n\n// 获取所有输入项\nconst inputItems = $input.all();\nconsole.log(`处理 ${inputItems.length} 个职位项`);\n\n// 使用map处理每个项目\nconst normalizedJobs = inputItems.map(item => {\n  const inputData = item.json || {};\n  return { json: normalizeJobData(inputData) };\n});\n\n// 记录处理结果\nconsole.log(`标准化后得到 ${normalizedJobs.length} 个职位`);\n\n// 返回标准化的职位数据数组\nreturn normalizedJobs;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        600,
        560
      ],
      "id": "107cb74f-c30c-4f33-bd18-bd3ca126eba3",
      "name": "normalize_job_data1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        920,
        580
      ],
      "id": "0e1853fa-e4cf-42da-a3a5-b0e6635b2f7e",
      "name": "Merge"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.apify.com/v2/acts/curious_coder~linkedin-jobs-scraper/runs?token={{ $('Input').item.json.ApifyAPIKey }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {}
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n    \"count\": 100,\n    \"scrapeCompany\": true,\n    \"urls\": [\n        \"https://www.linkedin.com/jobs/search?keywords=&location=%E5%BE%B7%E5%9B%BD&geoId=101282230&f_JT=P%2CT&f_PP=100477049&f_TPR=r604800&position=1&pageNum=0\"\n    ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -720,
        580
      ],
      "name": "start_apify_run_linkedin",
      "id": "7c98cd7e-ad41-4745-b388-865750627599"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.apify.com/v2/acts/misceres~indeed-scraper/runs?token={{ $('Input').item.json.ApifyAPIKey }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"position\": \"werkstudent\",\n  \"country\": \"DE\",\n  \"location\": \"Munich\",\n  \"maxItems\": 20,\n  \"parseCompanyDetails\": false,\n  \"saveOnlyUniqueItems\": true,\n  \"followApplyRedirects\": false\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -720,
        1340
      ],
      "name": "start_apify_run_indeed",
      "id": "8cf94baa-0668-4f78-b639-51ec4b662bb3"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2140,
        580
      ],
      "id": "44a55512-45d7-4019-8f9a-688a7cc48ea2",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "content": "### stringify_json / Aggregate\n准备职位数据，转为AI可处理的格式，并聚合所有相关信息。",
        "height": 640,
        "width": 320,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2120,
        280
      ],
      "id": "b0f2893e-0ebe-4f21-abce-bdb738573b7d",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "job_listings",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "status",
              "fieldValue": "={{ $json.status }}"
            },
            {
              "fieldId": "processed_at",
              "fieldValue": "={{ $json.processed_at }}"
            }
          ]
        }
      },
      "id": "07ccc1de-a175-4077-94cf-a97aee091c8a",
      "name": "Supabase_update_job_status",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3740,
        -40
      ],
      "credentials": {
        "supabaseApi": {
          "id": "sNAXrHqOFX7RwECT",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 获取要更新的操作\nconst updateOps = $input.first().json.updateOperations;\n\n// 将每个更新操作拆分为单独的项\nreturn updateOps.map(op => op.json);"
      },
      "id": "0d6f0378-6f67-44ce-b091-cc586bf3b2c1",
      "name": "extract_update_operation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3520,
        -40
      ]
    },
    {
      "parameters": {
        "jsCode": "// 从复合对象中提取原始匹配结果\nreturn $input.first().json.matchedJobs;"
      },
      "id": "5de02ab2-6968-44c0-9ecd-5b309c1b3e47",
      "name": "extract_matched_jobs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3520,
        560
      ]
    },
    {
      "parameters": {
        "content": "### 注意花费\n建议run完之后，pin住数据",
        "height": 420,
        "width": 220,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -780,
        480
      ],
      "id": "4c6d92dc-a798-4f42-ae2d-d681826cdc20",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "content": "### 注意花费\n建议run完之后，pin住数据",
        "height": 420,
        "width": 220,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -780,
        1240
      ],
      "id": "48b38117-786d-4fab-96a2-150669858000",
      "name": "Sticky Note15"
    },
    {
      "parameters": {
        "content": "### normalize_job_data \n标准化从不同平台获取的职位数据，确保统一的数据结构。\n处理各字段的映射和默认值设置。",
        "height": 640,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        540,
        280
      ],
      "id": "a3e9d6a0-04cb-4fec-88d5-38693bbd50e8",
      "name": "Sticky Note16"
    },
    {
      "parameters": {
        "content": "### normalize_job_data \n标准化从不同平台获取的职位数据，确保统一的数据结构。\n处理各字段的映射和默认值设置。",
        "height": 640,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        540,
        1020
      ],
      "id": "1d3262e9-58cd-4eb8-82ca-fd93f39dd7a1",
      "name": "Sticky Note17"
    },
    {
      "parameters": {
        "content": "### extract_matched_jobs / extract_update_operation\n从AI匹配结果中提取最终推荐职位和需要更新的数据库记录。\n",
        "height": 460,
        "width": 480,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3440,
        -220
      ],
      "id": "62314cd8-38b2-4f47-8ce0-9365f188acd0",
      "name": "Sticky Note18"
    },
    {
      "parameters": {
        "content": "### update_job_status\n更新已处理职位的状态，避免重复推荐同一职位。\n",
        "height": 620,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3140,
        300
      ],
      "id": "1938735f-c13f-4c39-b33b-bbb8b3e4b714",
      "name": "Sticky Note19"
    },
    {
      "parameters": {
        "content": "\n### generate_html_template\n将匹配结果转换为美观的HTML邮件模板，包含职位详情和直接应用链接。",
        "height": 620,
        "width": 480,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3440,
        300
      ],
      "id": "8443703a-7c20-4252-91e7-a6c0e4e93a31",
      "name": "Sticky Note20"
    },
    {
      "parameters": {
        "content": "\n### AI Agent (求职信生成)\n**个性化求职信生成器**\n基于您的简历和特定职位描述，使用AI生成量身定制的专业求职信。\n求职信风格特点：\n- 以公司需求为中心，突出您如何解决特定问题\n- 简洁直接的表达方式\n- 真实个性化内容，避免陈词滥调\n- 针对职位关键要求提供有力证明\n- 质量优先，提供有力的实例而非空泛成就\n",
        "height": 1080,
        "width": 580,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1120,
        1780
      ],
      "id": "deb0c021-c55c-4bd2-a007-0e7b775dd84a",
      "name": "Sticky Note21"
    },
    {
      "parameters": {
        "content": "### Webhook\n接收求职信生成请求，处理特定职位ID的求职信生成。",
        "height": 640,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2960,
        1940
      ],
      "id": "fe1f46c5-a55b-4931-804d-0289de307096",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "\n### Gmail / Markdown\n格式化求职信内容并通过电子邮件发送给您。\n",
        "height": 640,
        "width": 220,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -120,
        1940
      ],
      "id": "3473e0e9-5d63-4850-add5-757fe1209834",
      "name": "Sticky Note22"
    },
    {
      "parameters": {
        "content": "\n### create_new_cover_letter / append_blocks\n将生成的求职信存储到Notion数据库中，方便后续查看和编辑。",
        "height": 640,
        "width": 760,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        160,
        1940
      ],
      "id": "c8deb8fb-25ca-49f9-8f25-07c74c14d6a6",
      "name": "Sticky Note23"
    },
    {
      "parameters": {
        "content": "\n5. 配置Notion集成（可选）：\n\n如需使用Notion跟踪应用进度，请确保设置了正确的Notion Database ID\n注：建议创建两个数据库：\n\nJob Tracker数据库\n属性：Company Name(标题), Job Title, Industry, Application URL, Location, Flexibility, Salary Range, Status\n\n\nCover Letter数据库\n属性：Title(标题), Company Name\n\n6. 数据库配置：\n\n确保在Supabase或您选择的数据库系统中创建了名为job_listings的表\n表结构应包含以下字段（可使用以下SQL创建）:\n\nsqlCREATE TABLE job_listings (\n  id TEXT PRIMARY KEY,\n  company_name TEXT NOT NULL,\n  job_title TEXT NOT NULL,\n  application_url TEXT,\n  location TEXT,\n  description TEXT,\n  industry TEXT,\n  flexibility TEXT,\n  salary_range TEXT,\n  status TEXT,\n  source TEXT,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n  processed_at TIMESTAMP WITH TIME ZONE,\n  reason_for_match TEXT\n);\n",
        "height": 820,
        "width": 900,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -800,
        -600
      ],
      "id": "339fecf0-ec3b-4fed-94b8-93d79fdb36a3",
      "name": "Sticky Note24"
    },
    {
      "parameters": {
        "content": "### DownloadResume\n从Google Drive下载您的简历PDF文件。请确保上传您的简历到Google Drive并获取文件ID。\n\n### Extract Information from Resume PDF\n提取简历PDF中的文本内容，为后续AI匹配做准备。\n\n### SetResumeField\n将提取的简历文本设置为变量，以便在工作流程的后续步骤中使用。",
        "height": 640,
        "width": 540
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1700,
        1940
      ],
      "id": "b90970fe-b19a-4b09-81d1-3ee7731dcba1",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "\n### create_new_job_listing\n在job tracker数据库建档",
        "height": 640,
        "width": 210,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1960,
        1940
      ],
      "id": "a44820e3-c5f1-48eb-b076-6ed303ac6ce5",
      "name": "Sticky Note25"
    },
    {
      "parameters": {
        "content": "\n### supabase_get\n按传入的id，在数据库里找到对应的工作描述。",
        "height": 640,
        "width": 370,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2380,
        1940
      ],
      "id": "9b4619b3-90f1-4e93-aec5-2e6ffdd8214f",
      "name": "Sticky Note26"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8e16b176-2cd3-448a-a859-6570cacda1f0",
              "name": "EmailAddressToReceiveCoverLetter",
              "value": "your@email.com",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2600,
        2220
      ],
      "id": "90b4feae-dedb-467e-abc4-c655630c86fe",
      "name": "Input1"
    },
    {
      "parameters": {
        "content": "### Input\n**关键配置节点**\n这里设置了整个工作流程中使用的重要变量：**EmailAddressToReceiveCoverLetter**: 接收职位推荐的邮箱",
        "height": 640,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2680,
        1940
      ],
      "id": "fc3d73fa-5f75-44fa-84ae-a1cdd7230328",
      "name": "Sticky Note27"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SetResumeField": {
      "main": [
        [
          {
            "node": "start_apify_run_linkedin",
            "type": "main",
            "index": 0
          },
          {
            "node": "start_apify_run_indeed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent: Find Best-matched jobs",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "DownloadResume": {
      "main": [
        [
          {
            "node": "Extract Information from Resume PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Information from Resume PDF": {
      "main": [
        [
          {
            "node": "SetResumeField",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent: Find Best-matched jobs": {
      "main": [
        [
          {
            "node": "update_job_status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent: Find Best-matched jobs",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Email the top job recommendations": {
      "main": [
        []
      ]
    },
    "Supabase": {
      "main": [
        []
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Input1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase_get": {
      "main": [
        [
          {
            "node": "create_new_job_listing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_job_id": {
      "main": [
        [
          {
            "node": "Supabase_get",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DownloadResume1": {
      "main": [
        [
          {
            "node": "Extract Information from Resume PDF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input": {
      "main": [
        [
          {
            "node": "DownloadResume",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "set_cover_letter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail": {
      "main": [
        [
          {
            "node": "parse_to_paragraphs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "stringify_json": {
      "main": [
        [
          {
            "node": "AI Agent: Find Best-matched jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Information from Resume PDF1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase1": {
      "main": [
        [
          {
            "node": "filter_by_status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parse_to_markdown": {
      "main": [
        [
          {
            "node": "Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parse_to_paragraphs": {
      "main": [
        [
          {
            "node": "create_new_cover_letter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "return_all_items": {
      "main": [
        [
          {
            "node": "append_blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "append_blocks": {
      "main": [
        []
      ]
    },
    "create_new_job_listing": {
      "main": [
        [
          {
            "node": "set_company_name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create_new_cover_letter": {
      "main": [
        [
          {
            "node": "return_all_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set_company_name": {
      "main": [
        [
          {
            "node": "DownloadResume1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set_cover_letter": {
      "main": [
        [
          {
            "node": "parse_to_markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_unique_jobs": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          },
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Extract Run ID": {
      "main": [
        [
          {
            "node": "Wait 1 Minutes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Run Status": {
      "main": [
        [
          {
            "node": "Check if Succeeded",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Succeeded": {
      "main": [
        [
          {
            "node": "Get Dataset Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait and Retry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait and Retry": {
      "main": [
        [
          {
            "node": "Check Run Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Dataset Items": {
      "main": [
        [
          {
            "node": "normalize_job_data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 1 Minutes": {
      "main": [
        [
          {
            "node": "Check Run Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter_by_status": {
      "main": [
        [
          {
            "node": "get_unique_jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate_html_template": {
      "main": [
        [
          {
            "node": "Email the top job recommendations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update_job_status": {
      "main": [
        [
          {
            "node": "extract_update_operation",
            "type": "main",
            "index": 0
          },
          {
            "node": "extract_matched_jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Run ID1": {
      "main": [
        [
          {
            "node": "Wait 1 Minutes1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Run Status1": {
      "main": [
        [
          {
            "node": "Check if Succeeded1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Succeeded1": {
      "main": [
        [
          {
            "node": "Get Dataset Items1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait and Retry1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait and Retry1": {
      "main": [
        [
          {
            "node": "Check Run Status1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 1 Minutes1": {
      "main": [
        [
          {
            "node": "Check Run Status1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Dataset Items1": {
      "main": [
        [
          {
            "node": "normalize_job_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_job_data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "normalize_job_data1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Supabase1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "start_apify_run_linkedin": {
      "main": [
        [
          {
            "node": "Extract Run ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "start_apify_run_indeed": {
      "main": [
        [
          {
            "node": "Extract Run ID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "stringify_json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract_update_operation": {
      "main": [
        [
          {
            "node": "Supabase_update_job_status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract_matched_jobs": {
      "main": [
        [
          {
            "node": "generate_html_template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input1": {
      "main": [
        [
          {
            "node": "get_job_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "timezone": "Europe/Berlin",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "4b799270-9a76-45af-9cf6-34cc35b6b3bb",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ff089384d8e9b170ba830ac19126c63abbb8e4f4ce98265b4929e40390a9507e"
  },
  "id": "hdtyEN3TSE5lcYuU",
  "tags": [
    {
      "createdAt": "2025-05-07T19:03:39.508Z",
      "updatedAt": "2025-05-07T19:03:39.508Z",
      "id": "aMCUQslRcX5XDhov",
      "name": "Linkedin"
    }
  ]
}